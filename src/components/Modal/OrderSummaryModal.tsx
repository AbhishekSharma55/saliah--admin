"use client";
import React, { useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { useShowOrder } from "@/Hooks/useShowOrder";
import {
  HoverCard,
  HoverCardContent,
  HoverCardTrigger,
} from "@/components/ui/hover-card";
import { InfoIcon } from "lucide-react";
import { dateFormate } from "@/lib/utils";
import ProductCard from "../Cards/ProductCard";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { DeliveryStatus, IOrder } from "@/lib/db/models/order.model";
import { Button } from "../ui/button";
import { useUpdateOrderAlert } from "@/Hooks/useUpdateOrderAlert";

const OrderSummaryModal = () => {
  const { isOpen, onClose, order } = useShowOrder();
  const [changeStatus, setChangeStatus] = useState({
    paymentStatus: "",
    status: "",
  });

  const { onOpen } = useUpdateOrderAlert();

  const updateOrderStatus = () => {
    onOpen(changeStatus, order as unknown as IOrder);
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      {/* <DialogTrigger>Open</DialogTrigger> */}
      <DialogContent className=" min-w-[70%] lg:min-w-[60%]  overflow-y-auto max-h-[30rem] ">
        <DialogHeader>
          <DialogTitle>Order summary</DialogTitle>
        </DialogHeader>

        <div className="flex flex-col gap-4">
          <div className="flex flex-wrap gap-4">
            <p className="flex flex-col">
              <span>Email</span>
              <span className="text-primary">{order?.email}</span>
            </p>
            <p className="flex flex-col">
              <span>First Name</span>
              <span className="text-primary">{order?.firstName}</span>
            </p>
            <p className="flex flex-col">
              <span>Last Name</span>
              <span className="text-primary">{order?.lastName}</span>
            </p>
            <p className="flex flex-col">
              <span>Phone</span>
              <span className="text-primary">{order?.phone}</span>
            </p>
            <p className="flex flex-col">
              <span>City</span>
              <span className="text-primary">{order?.city}</span>
            </p>
            <p className="flex flex-col">
              <span>Pin Code</span>
              <span className="text-primary">{order?.pinCode}</span>
            </p>
            <p className="flex flex-col">
              <span>State</span>
              <span className="text-primary">{order?.state}</span>
            </p>
            <p className="flex flex-col">
              <span>Country</span>
              <span className="text-primary">{order?.country}</span>
            </p>
            <div className="flex flex-col">
              <HoverCard>
                <HoverCardTrigger className="flex gap-2 items-center">
                  Order Id <InfoIcon className="w-4 h-4" />
                </HoverCardTrigger>
                <HoverCardContent>
                  The order ID in Razorpay is a unique identifier generated when
                  an order is initiated, regardless of whether the transaction
                  is successful, failed, or pending. It serves as a reference
                  point for tracking and managing payments throughout the
                  process.
                </HoverCardContent>
              </HoverCard>
              <span className="text-primary">{order?.orderId}</span>
            </div>
            <div className="flex flex-col">
              <HoverCard>
                <HoverCardTrigger className="flex gap-2 items-center">
                  Payment Id <InfoIcon className="w-4 h-4" />
                </HoverCardTrigger>
                <HoverCardContent>
                  Payment IDs are generated by Razorpay only upon successful
                  completion of a payment. If a payment fails, no payment ID is
                  created.
                </HoverCardContent>
              </HoverCard>
              <span className="text-primary">{order?.paymentId}</span>
            </div>
            <p className="flex flex-col">
              <span>Date</span>
              <span className="text-primary">
                {dateFormate(order?.createdAt)}
              </span>
            </p>
          </div>

          <div className="flex gap-4 justify-center flex-wrap ">
            {order?.orderSummary.map((o) => {
              return (
                <ProductCard
                  key={o?._id}
                  _id={o._id as string}
                  image={o.image as string}
                  name={o.name as string}
                  price={o.price as number}
                  quantity={o.quantity}
                  subTotal={o.subTotal as number}
                  total={o.total}
                  productId={o.productId as string}
                  unit={o.unit}
                />
              );
            })}
          </div>
          <div className="flex gap-2">
            <div className=" flex-1 flex flex-col">
              Delivery Status:
              <Select
                onValueChange={(val) => {
                  setChangeStatus((pre) => ({
                    ...pre,
                    status: val,
                  }));
                }}
              >
                <SelectTrigger className="w-full">
                  <SelectValue
                    placeholder={order?.status}
                    defaultValue={order?.status}
                  />
                </SelectTrigger>
                <SelectContent>
                  {Object.keys(DeliveryStatus).map((i) => (
                    <SelectItem value={i} key={i}>
                      {i}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            <div className=" flex-1 flex flex-col">
              Payment Status:
              <Select
                onValueChange={(val) => {
                  setChangeStatus((pre) => ({
                    ...pre,
                    paymentStatus: val,
                  }));
                }}
              >
                <SelectTrigger className="w-full">
                  <SelectValue
                    placeholder={order?.paymentStatus}
                    defaultValue={order?.paymentStatus}
                  />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Paid">Paid</SelectItem>
                  <SelectItem value="Pending">Pending</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </div>
        {
          <DialogFooter>
            <Button
              onClick={updateOrderStatus}
              disabled={!!!(changeStatus.paymentStatus || changeStatus.status)}
              type="submit"
            >
              Update
            </Button>
          </DialogFooter>
        }
      </DialogContent>
    </Dialog>
  );
};

export default OrderSummaryModal;
